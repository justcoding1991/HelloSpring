<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/util/spring-util.xsd">

 	<context:component-scan base-package="SpringJDBC"/> 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:spring_db.properties"></property>
	</bean>
	<!-- 读取spring_db.properties 文件 -->
    <!--配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url"
            value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${maxIdle}" />
        <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
    </bean>
    <!--
        采用注解方式来配置事务。针对数据源的事务管理器
        ，把我们定义的数据源注入到DataSourceTransactionManager类的属性dataSource中
    -->
    <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--
        引入命名空间： 1.xmlns:tx="http://www.springframework.org/schema/tx
        2.http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        采用@Transaction注解方式使用事务管理器
    -->
    <tx:annotation-driven transaction-manager="txManager" />

    <!-- 配置业务bean：PersonServiceBean -->
<!--      <bean id="personService" class="SpringJDBC.service.PersonService">   -->
      <!--  向属性dataSource注入数据源-->
<!--         <property name="dataSource" ref="dataSource"></property>  -->
        
<!-- 	<property name="sqlSession" ref="sqlSession"/> -->
<!--    </bean>   -->
       
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
        <property name="dataSource" ref="dataSource" />
<!--         <property name="configLocation" value="classpath:config/mybatis-config.xml"></property>  -->
         <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
<!--          <property name="mapperLocations" value="classpath:config/sqlMap/person-sqlMapping.xml" />   -->
    </bean> 
    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="SpringJDBC.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>
    <context:annotation-config />
		
</beans>